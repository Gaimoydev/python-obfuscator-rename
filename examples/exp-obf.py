_ᖙᖙᕸᕸᕾᕾᕾᕾ = []
class _ᕾᕾᕸᖙᖙᖙᕸᕸ:
    def __init__(_ᕸᖙᕾᕾᕸᖙᕸᕸ, _ᕸᕸᕾᖙᕸᖙᕸᕸ):
        _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᕸᕸᕾᖙᕸᖙᕸᕸ = _ᕸᕸᕾᖙᕸᖙᕸᕸ
class _ᕸᖙᕾᕾᕸᖙᕾᕾ:
    def __init__(_ᕸᖙᕾᕾᕸᖙᕸᕸ, _ᖙᕸᕸᕾᖙᖙᕾᖙ):
        _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᖙᕸᕸᕾᖙᖙᕾᖙ = _ᖙᕸᕸᕾᖙᖙᕾᖙ
class _ᖙᕾᕸᕸᖙᖙᕸᕸ(object):
    def __init__(_ᕸᖙᕾᕾᕸᖙᕸᕸ, _ᕾᕸᕾᕸᖙᖙᕾᕸ, _ᕾᕾᕸᕸᕾᖙᖙᕸ, _ᖙᖙᖙᕸᕾᕾᕸᕸ, _ᕾᕸᕸᕸᖙᖙᖙᖙ):
        _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᖙᖙᕾᖙᕸᕸᕸᖙ = _ᕾᕸᕾᕸᖙᖙᕾᕸ
        _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᕸᕾᕾᕸᕸᖙᖙᖙ = _ᕾᕾᕸᕸᕾᖙᖙᕸ
        _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᕸᕾᕾᕾᖙᕸᕸᕾ = _ᖙᖙᖙᕸᕾᕾᕸᕸ
        _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᖙᕸᖙᕾᕸᕾᖙᕸ = _ᕾᕸᕸᕸᖙᖙᖙᖙ
        _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᕾᖙᖙᕸᕾᖙᖙᕸ = None
        _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᖙᖙᖙᖙᕸᕾᕾᕾ = []
        _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᕾᖙᖙᕸᕸᖙᕾᕸ = []
    def _ᖙᕾᖙᖙᕾᕸᕸᖙ(_ᕸᖙᕾᕾᕸᖙᕸᕸ):
        _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᕾᖙᖙᕸᕾᖙᖙᕸ = _ᕸᖙᕾᕾᕸᖙᕾᕾ(None)
        _ᕸᖙᕾᕾᖙᕸᕾᖙ = _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᕾᖙᖙᕸᕾᖙᖙᕸ
        for _ᖙᕸᕸᕾᖙᖙᕾᖙ in _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᕸᕾᕾᕸᕸᖙᖙᖙ:
            _ᕾᕸᕾᖙᖙᕾᖙᖙ = _ᕸᖙᕾᕾᕸᖙᕾᕾ(_ᖙᕸᕸᕾᖙᖙᕾᖙ)
            _ᕸᖙᕾᕾᖙᕸᕾᖙ._ᖙᕾᖙᕾᕸᖙᕸᕾ = _ᕾᕸᕾᖙᖙᕾᖙᖙ
            _ᕾᕸᕾᖙᖙᕾᖙᖙ._ᖙᕾᕾᕸᕸᕾᕾᕾ = _ᕸᖙᕾᕾᖙᕸᕾᖙ
            _ᕾᕸᕾᖙᖙᕾᖙᖙ._ᕸᖙᕾᖙᖙᖙᕾᕾ = _ᕾᕸᕾᖙᖙᕾᖙᖙ
            _ᕾᕸᕾᖙᖙᕾᖙᖙ._ᕾᕾᕾᕸᕸᖙᕾᕾ = _ᕾᕸᕾᖙᖙᕾᖙᖙ
            _ᕸᖙᕾᕾᖙᕸᕾᖙ = _ᕾᕸᕾᖙᖙᕾᖙᖙ
        _ᕸᖙᕾᕾᖙᕸᕾᖙ._ᖙᕾᖙᕾᕸᖙᕸᕾ = _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᕾᖙᖙᕸᕾᖙᖙᕸ
        _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᕾᖙᖙᕸᕾᖙᖙᕸ._ᖙᕾᕾᕸᕸᕾᕾᕾ = _ᕸᖙᕾᕾᖙᕸᕾᖙ
        for _ᕸᕸᕾᕾᖙᕸᖙᕸ, _ᕸᕸᕾᖙᕸᖙᕸᕸ in enumerate(_ᕸᖙᕾᕾᕸᖙᕸᕸ._ᖙᖙᕾᖙᕸᕸᕸᖙ):
            _ᕸᕸᕸᕾᕸᖙᖙᖙ = None
            _ᕸᕾᕸᕾᕾᕸᖙᕾ = None
            _ᕸᖙᕾᕾᖙᕸᕾᖙ = _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᕾᖙᖙᕸᕾᖙᖙᕸ._ᖙᕾᖙᕾᕸᖙᕸᕾ
            while _ᕸᖙᕾᕾᖙᕸᕾᖙ!=_ᕸᖙᕾᕾᕸᖙᕸᕸ._ᕾᖙᖙᕸᕾᖙᖙᕸ:
                if _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᖙᕸᖙᕾᕸᕾᖙᕸ(_ᕸᕸᕾᖙᕸᖙᕸᕸ, _ᕸᖙᕾᕾᖙᕸᕾᖙ._ᖙᕸᕸᕾᖙᖙᕾᖙ):
                    _ᖙᕾᕾᖙᕸᕾᕸᕸ = _ᕾᕾᕸᖙᖙᖙᕸᕸ(_ᕸᕸᕾᕾᖙᕸᖙᕸ)
                    if not _ᕸᕸᕸᕾᕸᖙᖙᖙ:
                        _ᕸᕸᕸᕾᕸᖙᖙᖙ = _ᕸᕾᕸᕾᕾᕸᖙᕾ = _ᖙᕾᕾᖙᕸᕾᕸᕸ
                    else:
                        _ᕸᕾᕸᕾᕾᕸᖙᕾ._ᖙᕾᖙᕾᕸᖙᕸᕾ = _ᖙᕾᕾᖙᕸᕾᕸᕸ
                        _ᖙᕾᕾᖙᕸᕾᕸᕸ._ᖙᕾᕾᕸᕸᕾᕾᕾ = _ᕸᕾᕸᕾᕾᕸᖙᕾ
                        _ᕸᕾᕸᕾᕾᕸᖙᕾ = _ᖙᕾᕾᖙᕸᕾᕸᕸ
                    _ᕾᖙᖙᕾᖙᕾᕾᖙ = _ᕸᖙᕾᕾᖙᕸᕾᖙ._ᕸᖙᕾᖙᖙᖙᕾᕾ
                    _ᕸᖙᕾᕾᖙᕸᕾᖙ._ᕸᖙᕾᖙᖙᖙᕾᕾ = _ᖙᕾᕾᖙᕸᕾᕸᕸ
                    _ᖙᕾᕾᖙᕸᕾᕸᕸ._ᕾᕾᕾᕸᕸᖙᕾᕾ = _ᕸᖙᕾᕾᖙᕸᕾᖙ
                    _ᖙᕾᕾᖙᕸᕾᕸᕸ._ᕸᖙᕾᖙᖙᖙᕾᕾ = _ᕾᖙᖙᕾᖙᕾᕾᖙ
                    _ᕾᖙᖙᕾᖙᕾᕾᖙ._ᕾᕾᕾᕸᕸᖙᕾᕾ = _ᖙᕾᕾᖙᕸᕾᕸᕸ
                _ᕸᖙᕾᕾᖙᕸᕾᖙ = _ᕸᖙᕾᕾᖙᕸᕾᖙ._ᖙᕾᖙᕾᕸᖙᕸᕾ
            if _ᕸᕾᕸᕾᕾᕸᖙᕾ:
                _ᕸᕾᕸᕾᕾᕸᖙᕾ._ᖙᕾᖙᕾᕸᖙᕸᕾ = _ᕸᕸᕸᕾᕸᖙᖙᖙ
                _ᕸᕸᕸᕾᕸᖙᖙᖙ._ᖙᕾᕾᕸᕸᕾᕾᕾ = _ᕸᕾᕸᕾᕾᕸᖙᕾ
    def _ᕾᕸᕾᖙᕸᖙᖙᕾ(_ᕸᖙᕾᕾᕸᖙᕸᕸ):
        _ᕸᕾᖙᕸᕾᕸᕸᕾ = (_ᕸᖙᕾᕾᕸᖙᕸᕸ._ᕾᖙᖙᕸᕾᖙᖙᕸ._ᖙᕾᖙᕾᕸᖙᕸᕾ == _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᕾᖙᖙᕸᕾᖙᖙᕸ)
        if not _ᕸᕾᖙᕸᕾᕸᕸᕾ:
            _ᖙᖙᕾᕾᕾᕾᕸᕾ = True
            _ᕸᖙᕾᖙᖙᖙᖙᖙ = _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᕾᖙᖙᕸᕾᖙᖙᕸ._ᖙᕾᖙᕾᕸᖙᕸᕾ
            while _ᕸᖙᕾᖙᖙᖙᖙᖙ!=_ᕸᖙᕾᕾᕸᖙᕸᕸ._ᕾᖙᖙᕸᕾᖙᖙᕸ:
                if _ᕸᖙᕾᖙᖙᖙᖙᖙ._ᖙᕸᕸᕾᖙᖙᕾᖙ not in _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᕸᕾᕾᕾᖙᕸᕸᕾ or _ᕸᖙᕾᖙᖙᖙᖙᖙ._ᕾᕾᕾᕸᕸᖙᕾᕾ != _ᕸᖙᕾᖙᖙᖙᖙᖙ:
                    _ᖙᖙᕾᕾᕾᕾᕸᕾ = False
                    break
                _ᕸᖙᕾᖙᖙᖙᖙᖙ = _ᕸᖙᕾᖙᖙᖙᖙᖙ._ᖙᕾᖙᕾᕸᖙᕸᕾ
        if _ᕸᕾᖙᕸᕾᕸᕸᕾ or _ᖙᖙᕾᕾᕾᕾᕸᕾ:
            _ᕸᕸᖙᕸᕾᖙᖙᕾ = sorted(_ᕸᖙᕾᕾᕸᖙᕸᕸ._ᕾᖙᖙᕸᕸᖙᕾᕸ)
            if _ᕸᕸᖙᕸᕾᖙᖙᕾ not in _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᖙᖙᖙᖙᕸᕾᕾᕾ:
                _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᖙᖙᖙᖙᕸᕾᕾᕾ.append(_ᕸᕸᖙᕸᕾᖙᖙᕾ)
        else:
            _ᕸᖙᕾᖙᖙᖙᖙᖙ = _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᕾᖙᖙᕸᕾᖙᖙᕸ._ᖙᕾᖙᕾᕸᖙᕸᕾ
            if _ᕸᖙᕾᖙᖙᖙᖙᖙ._ᕾᕾᕾᕸᕸᖙᕾᕾ == _ᕸᖙᕾᖙᖙᖙᖙᖙ:
                if _ᕸᖙᕾᖙᖙᖙᖙᖙ._ᖙᕸᕸᕾᖙᖙᕾᖙ in _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᕸᕾᕾᕾᖙᕸᕸᕾ:
                    _ᕸᖙᕾᖙᖙᖙᖙᖙ = _ᕸᖙᕾᖙᖙᖙᖙᖙ._ᖙᕾᖙᕾᕸᖙᕸᕾ
                else:
                    return
            _ᕸᕾᕸᖙᕸᕾᕸᕾ = _ᕸᖙᕾᖙᖙᖙᖙᖙ._ᕾᕾᕾᕸᕸᖙᕾᕾ
            while _ᕸᕾᕸᖙᕸᕾᕸᕾ!=_ᕸᖙᕾᖙᖙᖙᖙᖙ:
                _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᕾᖙᖙᕸᕸᖙᕾᕸ.append(_ᕸᕾᕸᖙᕸᕾᕸᕾ._ᕸᕸᕾᖙᕸᖙᕸᕸ)
                _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᖙᖙᖙᕾᕸᕾᕸᕸ(_ᕸᕾᕸᖙᕸᕾᕸᕾ)
                _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᕾᕸᕾᖙᕸᖙᖙᕾ()
                _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᕸᖙᖙᕸᖙᕾᖙᕾ(_ᕸᕾᕸᖙᕸᕾᕸᕾ)
                _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᕾᖙᖙᕸᕸᖙᕾᕸ.pop()
                _ᕸᕾᕸᖙᕸᕾᕸᕾ = _ᕸᕾᕸᖙᕸᕾᕸᕾ._ᕾᕾᕾᕸᕸᖙᕾᕾ
    def _ᖙᖙᖙᕾᕸᕾᕸᕸ(_ᕸᖙᕾᕾᕸᖙᕸᕸ, r):
        _ᕾᕸᕸᖙᖙᕸᕾᕾ = r
        _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᕾᕸᖙᖙᕸᕾᖙᕸ(r)
        r = r._ᖙᕾᖙᕾᕸᖙᕸᕾ
        while r!=_ᕾᕸᕸᖙᖙᕸᕾᕾ:
            _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᕾᕸᖙᖙᕸᕾᖙᕸ(r)
            r = r._ᖙᕾᖙᕾᕸᖙᕸᕾ
    def _ᕸᖙᖙᕸᖙᕾᖙᕾ(_ᕸᖙᕾᕾᕸᖙᕸᕸ, r):
        _ᕾᕸᕸᖙᖙᕸᕾᕾ = r
        r = r._ᖙᕾᕾᕸᕸᕾᕾᕾ
        while r!=_ᕾᕸᕸᖙᖙᕸᕾᕾ:
            _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᕸᕸᖙᕸᕸᕾᕾᖙ(r)
            r = r._ᖙᕾᕾᕸᕸᕾᕾᕾ
        _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᕸᕸᖙᕸᕸᕾᕾᖙ(r)
    def _ᕾᕸᖙᖙᕸᕾᖙᕸ(_ᕸᖙᕾᕾᕸᖙᕸᕸ, _ᕾᕾᕾᕾᕾᖙᕾᖙ):
        while not isinstance(_ᕾᕾᕾᕾᕾᖙᕾᖙ, _ᕸᖙᕾᕾᕸᖙᕾᕾ):
            _ᕾᕾᕾᕾᕾᖙᕾᖙ = _ᕾᕾᕾᕾᕾᖙᕾᖙ._ᕸᖙᕾᖙᖙᖙᕾᕾ
        _ᕾᕾᕾᕾᕾᖙᕾᖙ._ᖙᕾᖙᕾᕸᖙᕸᕾ._ᖙᕾᕾᕸᕸᕾᕾᕾ = _ᕾᕾᕾᕾᕾᖙᕾᖙ._ᖙᕾᕾᕸᕸᕾᕾᕾ
        _ᕾᕾᕾᕾᕾᖙᕾᖙ._ᖙᕾᕾᕸᕸᕾᕾᕾ._ᖙᕾᖙᕾᕸᖙᕸᕾ = _ᕾᕾᕾᕾᕾᖙᕾᖙ._ᖙᕾᖙᕾᕸᖙᕸᕾ
        _ᖙᕾᖙᕸᕾᕸᕸᕸ = _ᕾᕾᕾᕾᕾᖙᕾᖙ
        _ᕾᕾᕾᕾᕾᖙᕾᖙ = _ᕾᕾᕾᕾᕾᖙᕾᖙ._ᕾᕾᕾᕸᕸᖙᕾᕾ
        while _ᕾᕾᕾᕾᕾᖙᕾᖙ!=_ᖙᕾᖙᕸᕾᕸᕸᕸ:
            r = _ᕾᕾᕾᕾᕾᖙᕾᖙ
            _ᖙᕾᖙᕸᕸᕾᖙᕸ = _ᕾᕾᕾᕾᕾᖙᕾᖙ._ᖙᕾᖙᕾᕸᖙᕸᕾ
            while _ᖙᕾᖙᕸᕸᕾᖙᕸ!=r:
                _ᖙᕾᖙᕸᕸᕾᖙᕸ._ᕸᖙᕾᖙᖙᖙᕾᕾ._ᕾᕾᕾᕸᕸᖙᕾᕾ = _ᖙᕾᖙᕸᕸᕾᖙᕸ._ᕾᕾᕾᕸᕸᖙᕾᕾ
                _ᖙᕾᖙᕸᕸᕾᖙᕸ._ᕾᕾᕾᕸᕸᖙᕾᕾ._ᕸᖙᕾᖙᖙᖙᕾᕾ = _ᖙᕾᖙᕸᕸᕾᖙᕸ._ᕸᖙᕾᖙᖙᖙᕾᕾ
                _ᖙᕾᖙᕸᕸᕾᖙᕸ = _ᖙᕾᖙᕸᕸᕾᖙᕸ._ᖙᕾᖙᕾᕸᖙᕸᕾ
            _ᕾᕾᕾᕾᕾᖙᕾᖙ = _ᕾᕾᕾᕾᕾᖙᕾᖙ._ᕾᕾᕾᕸᕸᖙᕾᕾ
    def _ᕸᕸᖙᕸᕸᕾᕾᖙ(_ᕸᖙᕾᕾᕸᖙᕸᕸ, _ᕾᕾᕾᕾᕾᖙᕾᖙ):
        while not isinstance(_ᕾᕾᕾᕾᕾᖙᕾᖙ, _ᕸᖙᕾᕾᕸᖙᕾᕾ):
            _ᕾᕾᕾᕾᕾᖙᕾᖙ = _ᕾᕾᕾᕾᕾᖙᕾᖙ._ᕸᖙᕾᖙᖙᖙᕾᕾ
        _ᕾᕾᕾᕾᕾᖙᕾᖙ._ᖙᕾᕾᕸᕸᕾᕾᕾ._ᖙᕾᖙᕾᕸᖙᕸᕾ = _ᕾᕾᕾᕾᕾᖙᕾᖙ
        _ᕾᕾᕾᕾᕾᖙᕾᖙ._ᖙᕾᖙᕾᕸᖙᕸᕾ._ᖙᕾᕾᕸᕸᕾᕾᕾ = _ᕾᕾᕾᕾᕾᖙᕾᖙ
        _ᖙᕾᖙᕸᕾᕸᕸᕸ = _ᕾᕾᕾᕾᕾᖙᕾᖙ
        _ᕾᕾᕾᕾᕾᖙᕾᖙ = _ᕾᕾᕾᕾᕾᖙᕾᖙ._ᕸᖙᕾᖙᖙᖙᕾᕾ
        while _ᕾᕾᕾᕾᕾᖙᕾᖙ!=_ᖙᕾᖙᕸᕾᕸᕸᕸ:
            r = _ᕾᕾᕾᕾᕾᖙᕾᖙ
            _ᖙᕾᖙᕸᕸᕾᖙᕸ = _ᕾᕾᕾᕾᕾᖙᕾᖙ._ᖙᕾᖙᕾᕸᖙᕸᕾ
            while _ᖙᕾᖙᕸᕸᕾᖙᕸ!=r:
                _ᖙᕾᖙᕸᕸᕾᖙᕸ._ᕸᖙᕾᖙᖙᖙᕾᕾ._ᕾᕾᕾᕸᕸᖙᕾᕾ = _ᖙᕾᖙᕸᕸᕾᖙᕸ
                _ᖙᕾᖙᕸᕸᕾᖙᕸ._ᕾᕾᕾᕸᕸᖙᕾᕾ._ᕸᖙᕾᖙᖙᖙᕾᕾ = _ᖙᕾᖙᕸᕸᕾᖙᕸ
                _ᖙᕾᖙᕸᕸᕾᖙᕸ = _ᖙᕾᖙᕸᕸᕾᖙᕸ._ᖙᕾᖙᕾᕸᖙᕸᕾ
            _ᕾᕾᕾᕾᕾᖙᕾᖙ = _ᕾᕾᕾᕾᕾᖙᕾᖙ._ᕸᖙᕾᖙᖙᖙᕾᕾ
    def _ᖙᕾᕾᕾᕾᕸᕸᕾ(_ᕸᖙᕾᕾᕸᖙᕸᕸ):
        return [[_ᕸᖙᕾᕾᕸᖙᕸᕸ._ᖙᖙᕾᖙᕸᕸᕸᖙ[_ᕾᕾᖙᕸᕾᕾᖙᖙ] for _ᕾᕾᖙᕸᕾᕾᖙᖙ in _ᕸᕸᖙᕸᕾᖙᖙᕾ] for _ᕸᕸᖙᕸᕾᖙᖙᕾ in _ᕸᖙᕾᕾᕸᖙᕸᕸ._ᖙᖙᖙᖙᕸᕾᕾᕾ]
def _ᕸᕸᖙᖙᕸᖙᖙᕾ(_ᖙᖙᕾᕸᕾᕸᕸᕸ):
    _ᕾᕸᕾᕸᖙᖙᕾᕸ = [(_ᕾᕾᖙᕸᕾᕾᖙᖙ, _ᕸᕾᕸᕾᕾᖙᕸᕸ) for _ᕾᕾᖙᕸᕾᕾᖙᖙ in range(_ᖙᖙᕾᕸᕾᕸᕸᕸ) for _ᕸᕾᕸᕾᕾᖙᕸᕸ in range(_ᖙᖙᕾᕸᕾᕸᕸᕸ)]
    _ᕾᕾᕸᕸᕾᖙᖙᕸ = []
    _ᖙᖙᖙᕸᕾᕾᕸᕸ = []
    for _ᕸᕸᕾᕾᖙᕸᖙᕸ in range(_ᖙᖙᕾᕸᕾᕸᕸᕸ):
        _ᕾᕾᕸᕸᕾᖙᖙᕸ.append(('row', _ᕸᕸᕾᕾᖙᕸᖙᕸ))
    for _ᕸᕸᕾᕾᖙᕸᖙᕸ in range(_ᖙᖙᕾᕸᕾᕸᕸᕸ):
        _ᕾᕾᕸᕸᕾᖙᖙᕸ.append(('col', _ᕸᕸᕾᕾᖙᕸᖙᕸ))
    for _ᕸᕸᕾᕾᖙᕸᖙᕸ in range(_ᖙᖙᕾᕸᕾᕸᕸᕸ*2-1):
        _ᕾᕾᕸᕸᕾᖙᖙᕸ.append(('diag', _ᕸᕸᕾᕾᖙᕸᖙᕸ))
        _ᖙᖙᖙᕸᕾᕾᕸᕸ.append(('diag', _ᕸᕸᕾᕾᖙᕸᖙᕸ))
    for _ᕸᕸᕾᕾᖙᕸᖙᕸ in range(_ᖙᖙᕾᕸᕾᕸᕸᕸ*2-1):
        _ᕾᕾᕸᕸᕾᖙᖙᕸ.append(('rdiag', _ᕸᕸᕾᕾᖙᕸᖙᕸ))
        _ᖙᖙᖙᕸᕾᕾᕸᕸ.append(('rdiag', _ᕸᕸᕾᕾᖙᕸᖙᕸ))
    def _ᖙᕾᕾᕸᕸᖙᕸᕾ(_ᕸᕸᕾᖙᕸᖙᕸᕸ, _ᖙᕸᕸᕾᖙᖙᕾᖙ):
        _ᕸᕾᕾᕾᕸᕸᕾᖙ, _ᕸᖙᕸᖙᖙᕸᕸᖙ = _ᖙᕸᕸᕾᖙᖙᕾᖙ
        if _ᕸᕾᕾᕾᕸᕸᕾᖙ=='row':
            return _ᕸᕸᕾᖙᕸᖙᕸᕸ[0]==_ᕸᖙᕸᖙᖙᕸᕸᖙ
        if _ᕸᕾᕾᕾᕸᕸᕾᖙ=='col':
            return _ᕸᕸᕾᖙᕸᖙᕸᕸ[1]==_ᕸᖙᕸᖙᖙᕸᕸᖙ
        if _ᕸᕾᕾᕾᕸᕸᕾᖙ=='diag':
            return (_ᕸᕸᕾᖙᕸᖙᕸᕸ[0]+_ᕸᕸᕾᖙᕸᖙᕸᕸ[1])==_ᕸᖙᕸᖙᖙᕸᕸᖙ
        else:
            return (_ᖙᖙᕾᕸᕾᕸᕸᕸ-1-_ᕸᕸᕾᖙᕸᖙᕸᕸ[0]+_ᕸᕸᕾᖙᕸᖙᕸᕸ[1])==_ᕸᖙᕸᖙᖙᕸᕸᖙ
    _ᕾᕸᕸᕾᕸᖙᖙᕾ = _ᖙᕾᕸᕸᖙᖙᕸᕸ(_ᕾᕸᕾᕸᖙᖙᕾᕸ, _ᕾᕾᕸᕸᕾᖙᖙᕸ, _ᖙᖙᖙᕸᕾᕾᕸᕸ, _ᖙᕾᕾᕸᕸᖙᕸᕾ)
    _ᕾᕸᕸᕾᕸᖙᖙᕾ._ᖙᕾᖙᖙᕾᕸᕸᖙ()
    _ᕾᕸᕸᕾᕸᖙᖙᕾ._ᕾᕸᕾᖙᕸᖙᖙᕾ()
    _ᕾᖙᕸᕾᖙᕾᕸᖙ = _ᕾᕸᕸᕾᕸᖙᖙᕾ._ᖙᕾᕾᕾᕾᕸᕸᕾ()
    for _ᕸᕸᖙᕸᕾᖙᖙᕾ in _ᕾᖙᕸᕾᖙᕾᕸᖙ:
        print("+++++++++")
        for _ᕸᕸᕾᕾᖙᕸᖙᕸ in range(_ᖙᖙᕾᕸᕾᕸᕸᕸ):
            _ᕸᕾᕾᕾᕾᕸᕸᕸ = ""
            for _ᖙᕾᕸᕸᖙᖙᖙᕸ in range(_ᖙᖙᕾᕸᕾᕸᕸᕸ):
                if (_ᕸᕸᕾᕾᖙᕸᖙᕸ, _ᖙᕾᕸᕸᖙᖙᖙᕸ) in _ᕸᕸᖙᕸᕾᖙᖙᕾ:
                    _ᕸᕾᕾᕾᕾᕸᕸᕸ+="1"
                else:
                    _ᕸᕾᕾᕾᕾᕸᕸᕸ+="0"
            print(_ᕸᕾᕾᕾᕾᕸᕸᕸ)
        print("+++++++++")
    print("%d results found for N-Queen"%len(_ᕾᖙᕸᕾᖙᕾᕸᖙ))
def _ᕸᕸᕸᕸᕸᕸᖙᕾ():
    _ᕸᕸᖙᖙᕸᖙᖙᕾ(10)
if __name__ == "__main__":
    _ᕸᕸᕸᕸᕸᕸᖙᕾ()
